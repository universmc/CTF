const fs = require("fs");
const Groq = require("groq-sdk");
const groq = new Groq();
const db = new Groq({});

async function main() {
  // Liste des CTFs avec leurs d√©tails
  const CTFs = [
  
  {
    "id": 3,
    "title": "R2D2 - L'IA au service de la justice sociale",
    "Description": "Histoire d'Alicia, une intelligence artificielle r√©sidant dans un radar, qui lutte contre l'√©vasion fiscale et les infractions routi√®res en s'appuyant sur la d√©ontologie et les principes anthropiques.",
    "objective": "√âtudier le cas d'Alicia, analyser son impact sur la pr√©vention des accidents de la route et de la fraude fiscale, puis proposer des solutions pour promouvoir la justice sociale en encourageant l'adoption de radars et d'IA d√©di√©s √† ces causes.",
    "tasks": [
    "Comprendre le r√¥le d'Alicia dans l'enqu√™te d'affaires d'√©vasion fiscale et de pr√©vention des infractions routi√®res.",
    "√âvaluer l'efficacit√© d'Alicia en tant qu'IA et son impact sur la s√©curit√© routi√®re et la lutte contre la fraude fiscale.",
    "Identifier les meilleures pratiques pour encourager l'adoption de radars et d'IA, comme Alicia, pour renforcer la justice sociale et la pr√©vention.",
    "Proposer des recommandations et un plan d'action pour la mise en ≈ìuvre d'une strat√©gie de pr√©vention reposant sur l'utilisation d'IA dans les radars et l'encouragement √† l'adoption de ces technologies."
    ],
    "phases": [
    "Analyse - Collecte et √©tude des donn√©es et informations disponibles sur Alicia, sa fonction et son impact sur la justice sociale et la pr√©vention.",
    "√âtude de cas - Examen approfondi de l'utilisation d'Alicia dans les enqu√™tes et la pr√©vention, en identifiant les points forts et les domaines d'am√©lioration.",
    "Documentation - R√©daction d'un rapport pr√©sentant les conclusions de l'√©tude de cas, les recommandations et le plan d'action pour une strat√©gie de pr√©vention reposant sur l'IA et l'adoption de radars."
    ]
    }
  ];

  // Exemple d'algorithme pour g√©n√©rer la documentation
  for (const ctf of CTFs) {
    const ctfDetails = `
# ${ctf.title}
# ${ctf.Description}
**Objectif**: ${ctf.objective}
**Phases**: ${ctf.phases.join(", ")}

## T√¢ches
${ctf.tasks.map((task, index) => `- ${index + 1}. ${task}`).join("\n")}

---
    `;

    const chatCompletion = await groq.chat.completions.create({
      messages: [
        {
          role: "system",
          name: "[üìî.codex]",
          content: "phase[00]:[DATE]:[initialisation des variables dans contexte D'une enqu√™te parlementaire]",
        },
      ],
      model: "gemma2-9b-it",
      temperature: 0.5,
      max_tokens: 2024,
      top_p: 1,
      stop: null,
      stream: false,
    });

    const mdContent = chatCompletion.choices[0]?.message?.content;
    const fileName = `CTF_${ctf.id}_${ctf.title.replace(/ /g, "_")}.md`;
    fs.writeFileSync(fileName, ctfDetails + mdContent);
    console.log(`Documentation g√©n√©r√©e : ${fileName}`);
  }

  console.log("Toutes les documentations des CTF ont √©t√© g√©n√©r√©es avec succ√®s !");
}

main();