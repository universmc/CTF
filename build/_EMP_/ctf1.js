const fs = require("fs");
const Groq = require("groq-sdk");
const groq = new Groq();
const db = new Groq({});

async function main() {
  // Liste des CTFs avec leurs d√©tails
  const CTFs = [
    {
      "id": 1,
      "title": "EMP - Pr√©vention et lutte contre la fraude fiscale",
      "Description": "Identifier les cas potentiels de fraude fiscale et proposer des solutions pour pr√©venir et lutter contre ces activit√©s ill√©gales.",
      "objective": "D√©tecter les activit√©s suspectes en mati√®re de fraude fiscale, collecter et analyser des preuves et √©laborer des recommandations pour renforcer la pr√©vention et la lutte contre ces pratiques.",
      "tasks": [
      "Utiliser des techniques d'investigation avanc√©es pour analyser les donn√©es financi√®res et les transactions li√©es √† la fraude fiscale.",
      "Identifier des anomalies, les typologies et les sch√©mas de fraude potentiels et g√©n√©rer des rapports sur les activit√©s suspectes.",
      "Collaborer avec les organismes gouvernementaux et les autorit√©s comp√©tentes pour √©changer des informations et des bonnes pratiques en mati√®re de lutte contre la fraude fiscale.",
      "Proposer des solutions pour renforcer les m√©canismes de pr√©vention, de d√©tection et de r√©pression de la fraude fiscale."
      ],
      "phases": [
      "Reconnaissance - Collecte et analyse des informations disponibles sur les activit√©s potentiellement li√©es √† la fraude fiscale.",
      "Analyse - √âtude approfondie des donn√©es et identification des anomalies et des typologies de fraude.",
      "Documentation - R√©daction de rapports et de recommandations pour les pouvoirs publics et les organismes de r√©gulation."
      ]
      }
  ];

  // Exemple d'algorithme pour g√©n√©rer la documentation
  for (const ctf of CTFs) {
    const ctfDetails = `
# ${ctf.title}
# ${ctf.Description}
**Objectif**: ${ctf.objective}
**Phases**: ${ctf.phases.join(", ")}

## T√¢ches
${ctf.tasks.map((task, index) => `- ${index + 1}. ${task}`).join("\n")}

---
    `;

    const chatCompletion = await groq.chat.completions.create({
      messages: [
        {
          role: "system",
          name: "[üìî.codex]",
          content: "phase[00]:[DATE]:[initialisation des variables dans contexte D'une enqu√™te parlementaire]",
        },
      ],
      model: "gemma2-9b-it",
      temperature: 0.5,
      max_tokens: 2024,
      top_p: 1,
      stop: null,
      stream: false,
    });

    const mdContent = chatCompletion.choices[0]?.message?.content;
    const fileName = `CTF_${ctf.id}_${ctf.title.replace(/ /g, "_")}.md`;
    fs.writeFileSync(fileName, ctfDetails + mdContent);
    console.log(`Documentation g√©n√©r√©e : ${fileName}`);
  }

  console.log("Toutes les documentations des CTF ont √©t√© g√©n√©r√©es avec succ√®s !");
}

main();